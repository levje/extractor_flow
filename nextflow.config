profiles {
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = "-v ${params.templates_dir}:/extractor_flow -u \$(id -u):\$(id -g)"
    }

    apptainer {
        docker.enabled          = false
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = true
        apptainer.runOptions    = "--bind ${params.templates_dir}:/extractor_flow"
    }

    fully_reproducible {
        params.processes_bet_register_t1 = 1
    }

    extract_bundles {
        params.extract_bundles = true
    }
}

manifest {
    name            = 'scilus/nf-extractor'
    description     = """nf-extractor is a Nextflow pipeline to filter and extract brain tractograms from a set of subjects."""
    version         = '0.1dev'
}

params {
    // Supplied at runtime by the user.
    input = null
    templates_dir = null

    // Optional parameters supplied at runtime by the user.
    keep_intermediate_steps=false
    orig=false
    run_bet=false
    quick_registration=true

    // Output paths
    mni_space  = "mni_space"
    orig_space = "orig_space"
    output_dir = "./results_extractorflow/final_outputs"
    intermediate_dir = "./results_extractorflow/intermediates"

    // Template T1 path
    template_t1="/human-data/mni_152_sym_09c/t1"
    extract_bundles = false

    distance = 0

    // Number of processes per tasks
    processes_major_filtering = 4

    // Process control
    processes = false

    // Templates and ROIs folder
    rois_folder = "/extractor_flow/templates_and_ROIs/"

    // Filtering List Folder
    FLF = "/extractor_flow/filtering_lists/filtering_list_"

    // Loop
    loop_angle_threshold = 360
    min_streamline_length = 20
    max_streamline_length = 100000

    // Sides
    sides = "L,R"
    
    cc_homotopic_pairs = "AGWM,CingGWM,CuGWM,FuGWM,Hippo,IFGWM,Ins,IOGWM,ITGWM,LFOGWM,LGWM,MFGWM,MFOGWM,MOGWM,MTGWM,PHG,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SOGWM,SPGWM,STGWM,T_pole_gwm"

    bg_lists        = "AGWM,CingGWM,CuGWM,ENT,FuGWM,Hippo,IFGWM,Ins,IOGWM,ITGWM,LFOGWM,LGWM,MFGWM,MFOGWM,MOGWM,MTGWM,PHG,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SOGWM,SPGWM,STGWM,T_pole_gwm"
    bg_caud_lists   = "AGWM,CingGWM,IFGWM,Ins,ITGWM,LFOGWM,MFGWM,MFOGWM,MTGWM,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SPGWM,STGWM,T_pole_gwm"


    asso_ventral_lists          = "O,P,T"
    asso_dorsal_f_o_f_t_lists   = "F_O_dorsal,F_T_dorsal"
    asso_dorsal_f_p_lists       = "F_P_dorsal_IFG,F_P_dorsal_MFG,F_P_dorsal_MiscG,F_P_dorsal_PrCG,F_P_dorsal_SFG"

    asso_p_o_lists = "P_O_PoCG,P_O_SPG,P_O_SMG,P_O_AG,P_O_PrCuG"
    asso_p_t_lists = "P_T_PoCG,P_T_SPG,P_T_SMG,P_T_AG,P_T_PrCuG"
    asso_o_t_lists = "O_T_STG,O_T_MTG,O_T_ITG,O_T_Tpole,O_T_FuG,O_T_MTL"
    asso_ins_lists = "Ins_F,Ins_P,Ins_O,Ins_T,"

    asso_frontal_be_lists   = "SFG,MFG,IFG,PrCG,FrOrbG"
    asso_occipital_be_lists = "MOG,SOG,IOG,CuG,LG"
    asso_parietal_be_lists  = "PoCG,SPG,AG,SMG,PrCuG"
    asso_temporal_be_lists  ="STG,MTG,ITG,FuG"
    seeds = "JHU_MNI_AGWM_,JHU_MNI_CingGWM_,JHU_MNI_CuGWM_,JHU_MNI_FuGWM_,JHU_MNI_IFGWM_,JHU_MNI_Ins_,JHU_MNI_IOGWM_,JHU_MNI_ITGWM_,JHU_MNI_LFOGWM_,JHU_MNI_LGWM_,JHU_MNI_MFGWM_,JHU_MNI_MFOGWM_,JHU_MNI_MOGWM_,JHU_MNI_MTGWM_,JHU_MNI_PoCGWM_,JHU_MNI_PrCGWM_,JHU_MNI_PrCuGWM_,JHU_MNI_RGGWM_,JHU_MNI_SFGWM_,JHU_MNI_SMGWM_,JHU_MNI_SOGWM_,JHU_MNI_SPGWM_,JHU_MNI_STGWM_,JHU_MNI_T_pole_gwm_,JHU_MNI_Hippo_,JHU_MNI_PHG_"

    // Atlas
    atlas.template  = "JHU_MNI_SS_T1_brain_182x218x182_conv_f.nii.gz"
    atlas.JHU_8     = "JHU_MNI_all_noDWM_all8.nii.gz"
    atlas.csf       = 'JHU_MNI_CSF.nii.gz'
}

// cleanup = false
singularity.autoMounts = true
docker.runOptions = "-v ${params.templates_dir}:/extractor_flow"

process {
    scratch = true
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries = 0
    maxErrors = -1
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    tag = { "$sid" }
    afterScript = 'sleep 1'
    containerOptions = "--user \$(id -u):\$(id -g)"

    //////////////////////
    // Preprocessing modules
    //////////////////////

    withName: "REGISTRATION_ANTS" {
        ext.quick = "${params.quick_registration}"

        publishDir = [
            // path: { "${output_dir}/${meta.id}/$params.mni_space/" },
            path: { "${params.output_dir}/${meta.id}/REGISTRATION_ANTS/" },
            mode: 'copy'
        ]
    }

    withName: "REGISTRATION_TRACTOGRAM" {
        ext.inverse = true
        ext.reverse_operation = false
        ext.suffix = "mni_space"
        publishDir = [
            // path: {"${params.output_dir}/${meta.id}/$params.mni_space/"},
            path: {"${params.output_dir}/${meta.id}/REGISTRATION_TRACTOGRAM/"},
            mode: 'copy'
        ]
    }

    withName: "MAJOR_FILTERING" {
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/MAJOR_FILTERING/"},
        ]
    }

    withName: "REGISTRATION_TRACTOGRAM_ORIG" {
        ext.reverse_operation = true
        ext.inverse = false
        ext.when = params.orig
    }

    //////////////////////
    // Filtering list processes
    //////////////////////
    withName: "EXTRACT_FORNIX" {
        ext.filtering_list      = params.FLF+"fx.txt"
        ext.out_extension       = "fornix_f"
        ext.remaining_extension = "unplausible_streamlines_wo_fornix"
        ext.keep                = params.keep_intermediate_steps
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/FORNIX"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "EXTRACT_EE_CEREBELLUM" {
        ext.filtering_list      = params.FLF+"out_cerebellum.txt"
        ext.out_extension       = "wb_clean01_nocereb"
        ext.remaining_extension = "all_cerebellum"
        ext.keep                = true
        ext.extract_masks       = ""
        ext.distance            = params.distance

        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/EE_CEREBELLUM"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "EXTRACT_EE_BRAINSTEM" {
        ext.filtering_list      = params.FLF+"out_brainstem.txt"
        ext.out_extension       = "wb_clean02"
        ext.remaining_extension = "all_brainstem"
        ext.keep                = true
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/EE_BRAINSTEM"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "REMOVE_OUT_OF_CGM_DWM" {
        ext.filtering_list      = params.FLF+"ee_CGM_SWM.txt"
        ext.out_extension       = "wb_either_CGM_SWM"
        ext.remaining_extension = "no_CGM_SWM"
        ext.keep                = params.keep_intermediate_steps
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/REMOVE_OUT_OF_CGM_DWM"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "EXTRACT_ALL_COMMISSURAL" {
        ext.filtering_list      = params.FLF+"commissural.txt"
        ext.out_extension       = "wb_either_CGM_SWM_noCC"
        ext.remaining_extension = "tmp_CC"
        ext.keep                = true
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ALL_COMMISSURAL"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "EXTRACT_PLAUSIBLE_CC_CX" {
        ext.filtering_list      = params.FLF+"CC_Cx.txt"
        ext.out_extension       = "in_CC_Cx_f"
        ext.remaining_extension = "garbage"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/PLAUSIBLE_CC_CX"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "EXTRACT_PLAUSIBLE_AC_CX" {
        ext.filtering_list      = params.FLF+"AC_Cx.txt"
        ext.out_extension       = "in_AC_Cx_f"
        ext.remaining_extension = "garbage"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/PLAUSIBLE_AC_CX"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "SPLIT_NO_CC_ASSO_AND_BG" {
        ext.filtering_list      = params.FLF+"all_BG.txt"
        ext.out_extension       = "all_subcortical_from_CGM_SWM_noCC_f"
        ext.remaining_extension = "asso_noBG"
        ext.keep                = true
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_NO_CC_ASSO_AND_BG"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "SPLIT_BG_THAL" {
        ext.filtering_list      = params.FLF+"BG_ipsi_Thal.txt"
        ext.out_extension       = "BG_ipsi_Thal"
        ext.remaining_extension = "garbage_BG_ipsi_Thal"
        ext.keep                = false
        ext.reverse_suffix      = true
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_BG_THAL"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "SPLIT_BG_PUT" {
        ext.filtering_list      = params.FLF+"BG_ipsi_Put.txt"
        ext.out_extension       = "BG_ipsi_Put"
        ext.remaining_extension = "garbage_BG_ipsi_Put"
        ext.reverse_suffix      = true
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_BG_PUT"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "SPLIT_BG_CAUD" {
        ext.filtering_list      = params.FLF+"BG_ipsi_Caud.txt"
        ext.out_extension       = "BG_ipsi_Caud"
        ext.remaining_extension = "garbage_BG_ipsi_Caud"
        ext.reverse_suffix      = true
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_BG_CAUD"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "REMOVE_UNPLAUSIBLE_LONG_RANGE_ASSO" {
        ext.filtering_list      = params.FLF+"not_in_BG.txt"
        ext.out_extension       = "asso_all_intra_inter"
        ext.remaining_extension = "asso_lost2"
        ext.keep                = params.keep_intermediate_steps
        ext.extract_masks       = ""
        ext.distance            = params.distance
        ext.list_suffix         = ""
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_BG_CAUD"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "CC_HOMOTOPIC" {
        ext.filtering_list      = params.FLF+"CC_homo.txt"
        ext.out_extension       = "cc_homotopic"
        ext.remaining_extension = "garbage"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/CC_HOMOTOPIC"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_VENTRAL" {
        ext.filtering_list      = params.FLF+"ASSO_F.txt"
        ext.out_extension       = "asso_F"
        ext.remaining_extension = "asso_lost"
        ext.reverse_suffix      = true
        ext.mid_suffix          = "ventral"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_VENTRAL"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "SPLIT_ASSO_VENTRAL_IFOF_UF" {
        ext.filtering_list      = params.FLF+"split_IFOF_UF.txt"
        ext.out_extension       = "asso_IFOF_f"
        ext.remaining_extension = "asso_UF_f"
        ext.keep                = true
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/SPLIT_ASSO_VENTRAL_IFOF_UF"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_DORSAL_F_P" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_DORSAL_F_P"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_DORSAL_F_O_F_T" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_DORSAL_F_O_F_T"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_P_O" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_P_O"},
            enabled: params.keep_intermediate_steps
        ]
    }
    
    withName: "ASSO_P_T" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_P_T"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_O_T" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_O_T"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_INS" {
        ext.filtering_list      = params.FLF+"ASSO.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso"
        ext.remaining_extension = "asso_lost"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = params.distance
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_INS"},
            enabled: params.keep_intermediate_steps
        ]
    }

    withName: "ASSO_CING" {
        ext.filtering_list      = params.FLF+"ASSO_Cing.txt"
        ext.reverse_suffix      = true // Files are named <name>_${list}_${side}.txt
        ext.out_extension       = "asso_all_Cing"
        ext.remaining_extension = "asso_lost_Cing"
        ext.keep                = false
        ext.extract_masks       = ""
        ext.distance            = 1
        publishDir = [
            path: {"${params.intermediate_dir}/${meta.id}/EXTRACT/ASSO_CING"},
            enabled: params.keep_intermediate_steps
        ]
    }

    //////////////////////
    // Merge processes
    //////////////////////
    withName: "MERGE_BG_THAL" {
        ext.op          = "union"
        ext.out_name    = "BG_ipsi_Thal_all"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_BG_PUT" {
        ext.op          = "union"
        ext.out_name    = "BG_ipsi_Put_all"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }
    
    withName: "MERGE_BG_CAUD" {
        ext.op          = "union"
        ext.out_name    = "BG_ipsi_Caud_all"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_CC_HOMOTOPIC" {
        ext.op          = "union"
        ext.out_name    = "CC_homo"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_VENTRAL" {
        ext.op          = "union"
        ext.out_name    = "asso_all_ventral_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_DORSAL_F_P" {
        ext.op          = "union"
        ext.out_name    = "asso_F_P_dorsal_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }
    
    withName: "MERGE_ASSO_DORSAL" {
        ext.op          = "union"
        ext.out_name    = "asso_all_dorsal_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_P_O" {
        ext.op          = "union"
        ext.out_name    = "asso_all_P_O_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_P_T" {
        ext.op          = "union"
        ext.out_name    = "asso_all_P_T_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }
    
    withName: "MERGE_O_T" {
        ext.op          = "union"
        ext.out_name    = "asso_all_O_T_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_INS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_Ins_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_BE_FRONTAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraF_be_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_EE_FRONTAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraF_ee_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_BE_OCCIPITAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraO_be_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_EE_OCCIPITAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraO_ee_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_BE_PARIETAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraP_be_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_EE_PARIETAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraP_ee_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_BE_TEMPORAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraT_be_f"
        ext.out_suffix  = "_u"
        ext.save_empty  = true
        ext.force       = true
    }

    withName: "MERGE_ASSO_EE_TEMPORAL_GYRUS" {
        ext.op          = "union"
        ext.out_name    = "asso_all_intraT_ee_f"
        ext.out_suffix  = ""
        ext.save_empty  = true
        ext.force       = true
    }

    //////////////////////
    // Final outputs
    //////////////////////

    withName: "TRK_PLAUSIBLE" {
        publishDir = [
            path: {"${params.output_dir}/${meta.id}/results_mni/"},
            mode: 'copy'
        ]
    }

    withName: "TRK_UNPLAUSIBLE" {
        publishDir = [
            path: {"${params.output_dir}/${meta.id}/results_mni/"},
            mode: 'copy'
        ]
    }

    withName: "COPY_T1_TO_ORIG" {
        publishDir = [
            path: {"${params.output_dir}/${meta.id}/results_orig/"},
            mode: 'copy'
        ]
    }

    withName: "REGISTRATION_TRACTOGRAM_ORIG" {
        publishDir = [
            path: {"${params.output_dir}/${meta.id}/results_orig/"},
            mode: 'copy'
        ]
    }
}
